// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
		// use DMux to direct load signal to the right RAM8 location
		// using first half of address to locate RAM8 location
		// using second half to locate register in the RAM8
		DMux8Way(sel=address[0..2], in=load, a=l0, b=l1, c=l2, d=l3, e=l4, f=l5, g=l6, h=l7);

		RAM8(load=l0, in=in, address=address[3..5], out=o0);
		RAM8(load=l1, in=in, address=address[3..5], out=o1);
		RAM8(load=l2, in=in, address=address[3..5], out=o2);
		RAM8(load=l3, in=in, address=address[3..5], out=o3);
		RAM8(load=l4, in=in, address=address[3..5], out=o4);
		RAM8(load=l5, in=in, address=address[3..5], out=o5);
		RAM8(load=l6, in=in, address=address[3..5], out=o6);
		RAM8(load=l7, in=in, address=address[3..5], out=o7);

		// use Mux to direct the out value fom the right RAM8 chip
		// to the out pin
		Mux8Way16(sel=address[0..2], a=o0, b=o1, c=o2, d=o3, e=o4, f=o5, g=o6, h=o7, out=out);
}	